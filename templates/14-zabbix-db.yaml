{{ if has "zabbix_server" .Values.zabbix_components }}
# Persistent Volume Claim
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ .Release.Name }}-persistent-storage
  namespace: 
spec:
  # access mode:
  # - ReadWriteMany (RW from multi nodes)
  # - ReadWriteOnce (RW from a node)
  # - ReadOnlyMany (R from multi nodes)
  accessModes:
    - ReadWriteOnce
  storageClassName: {{ .Values.kubernetes.storage }}
  resources:
    requests:
      storage: {{ .Values.zabbix_server.volume_size }}
---
# MySQL ConfigMap - startup script
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-mysql-configmap
  namespace: {{ .Release.Namespace }}
  annotations:
    reloader.stakater.com/match: "true"
data:
  initdb.sh: |
    #!/bin/bash
    # Initialize MySQL database.
    # Add this into the container via mount point.
    while ! mysqladmin -uroot -p$MYSQL_ROOT_PASSWORD ping -hlocalhost --silent; do
        sleep 1
    done
    sleep 1
    mysql -uroot -p$MYSQL_ROOT_PASSWORD --force -e "FLUSH PRIVILEGES;" || true
    #mysql -uroot -p$MYSQL_ROOT_PASSWORD --force -e "CREATE DATABASE $MYSQL_DATABASE character set utf8 collate utf8_bin;" || true
    mysql -uroot -p$MYSQL_ROOT_PASSWORD --force -e "CREATE USER '$MYSQL_USER'@'%' IDENTIFIED WITH '$MYSQL_PASSWORD';" || true
    zcat /mysqlinit/create.sql.gz > /mysqlinit/create.sql
    mysql -uroot -p$MYSQL_ROOT_PASSWORD --force $MYSQL_DATABASE < /mysqlinit/create.sql || true
    mysql -uroot -p$MYSQL_ROOT_PASSWORD --force -e "GRANT SELECT,INSERT,UPDATE,DELETE ON $MYSQL_DATABASE.* TO '$MYSQL_USER'@'%';" || true
    mysql -uroot -p$MYSQL_ROOT_PASSWORD --force -e "FLUSH PRIVILEGES;" || true
---
# MySQL Service
apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}-mysql-service
  namespace: {{ .Release.Namespace }}
spec:
  ports:
    - protocol: TCP
      port: 3306
      targetPort: 3306
  selector:
    app: {{ .Release.Name }}-mysql
---
# MySQL Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-mysql-deployment
  namespace: {{ .Release.Namespace }}
  annotations:
    reloader.stakater.com/search: "true"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Release.Name }}-mysql
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-mysql
    spec:
      # securityContext:
      #   runAsUser: 1000
      #   runAsGroup: 1000
      #   fsGroup: 1000
      restartPolicy: Always
      initContainers:
        - name: {{ .Release.Name }}-mysql-init-container
          image: zabbix/zabbix-server-mysql:{{ .Values.zabbix_server.version }}
          command:
            - '/bin/bash'
            - '-c'
            - 'cp /usr/share/doc/zabbix-server-mysql/create.sql.gz /mysqlinit/create.sql.gz'
          volumeMounts:
            - name: mysql-init-sql-script-volume
              mountPath: "/mysqlinit/"
      containers:
        - name: {{ .Release.Name }}-mysql-container-name
          image: mariadb:{{ .Values.mysql.version }}
          imagePullPolicy: Always
          env:
            - name: MYSQL_USER
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-mysql-secret
                  key: mysql_username
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-mysql-secret
                  key: mysql_password
            - name: MYSQL_DATABASE
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-mysql-secret
                  key: mysql_database
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-mysql-secret
                  key: mysql_root_password
          args:
            - mysqld
            - --character-set-server=utf8
            - --collation-server=utf8_bin
            - --default-authentication-plugin=mysql_native_password
          securityContext:
            capabilities: {}
            privileged: false
          ports:
            - name: mysql
              containerPort: 3306
          volumeMounts:
            - name: mysql-persistent-storage-volume
              mountPath: /var/lib/mysql
            - name: mysql-init-script-volume
              mountPath: "/docker-entrypoint-initdb.d/initdb.sh"
              subPath: "initdb.sh"
            - name: mysql-init-sql-script-volume
              mountPath: "/mysqlinit/"
          startupProbe:
            exec:
              command:
                - 'mysqladmin'
                - 'ping'
                - '-h'
                - 'localhost'
            failureThreshold: 60
            periodSeconds: 1
          readinessProbe:
            exec:
              command:
                - 'mysqladmin'
                - 'ping'
                - '-h'
                - 'localhost'
            initialDelaySeconds: 0
            periodSeconds: 1
          livenessProbe:
            exec:
              command:
                - 'mysqladmin'
                - 'ping'
                - '-h'
                - 'localhost'
            initialDelaySeconds: 0
            periodSeconds: 1
          resources:
            requests:
              memory: "64Mi"
              cpu: "250m"
            limits:
              memory: "128Mi"
              cpu: "500m"
      volumes:
        - name: mysql-persistent-storage-volume
          persistentVolumeClaim:
            claimName: {{ .Release.Name }}-persistent-storage
        - name: mysql-init-script-volume
          configMap:
            name: {{ .Release.Name }}-mysql-configmap
        - name: mysql-init-sql-script-volume
          emptyDir: {}
{{ end }}